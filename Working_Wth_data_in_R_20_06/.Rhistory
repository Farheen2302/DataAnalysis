my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1996-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- as.Time("October 17, 1986 08:24")
t3 <- as.Date("October 17, 1986 08:24")
t3 <-  "October 17, 1986 08:24"
strptime(t3,"%B %d,%Y %H:%M")
t4 <-strptime(t3,"%B %d,%Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
t1 > Sys.time()
t1 >\< Sys.time()
t1 < Sys.time()
t1 < Sys.time()
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library("swirl")
swirl()
install.packages("rvest")
library("rvest", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
#Grabbing the web source page
library("rvest")
url = 'http://101.datascience.community/2012/04/09/colleges-with-data-science-degrees/'
webpage = html(url)
#Now grabbing the table
webpage
tbl = html_node(webpage,"table")
#Now keeping the table in the data frame
df = as.data.frame(html_table(tbl))
df
#read in the table rows
tr = html_nodes(tbl, 'tr')
#looping through the rows and pulling out the 'href'
tds = html_nodes(tr,'td a')
tds
links = html_attr(tds,'href')
linkd
link
links
df$URL = links
df
head(df)
head(df)
head(df)
head(df)
url = 'http://101.datascience.community/2012/04/09/colleges-with-data-science-degrees/'
url2 = 'http://101.datascience.community/2012/04/09/colleges-with-data-science-degrees/'
url2
webpage2 = html(url2)
webpage
webpage
tbl = html_node(webpage,"table")
tbl
tbl = html_node(webpage,"table")
df = as.data.frame(tbl,html_table(tbl))
df = as.data.frame(html_table(tbl))
df
url1 = 'http://decisionstats.org/'
url1
install.packages("rvest")
install.packages("rvest")
webpage = html(url1)
webpage = html(url1)
webpage
tbl = html_node(webpage,"table")
tbl
df = as.data.frame(html_table(tbl))
df
tbl = html_node(webpage,"table")
tbl
tbl = html_nodes(webpage,"table") %>% .[[2]] %>%
html_table()
tbl = html_nodes(webpage,"table") %>% .[[2]] %>% html_table
tbl = html_nodes(webpage,"table") %>% .[[2]] %>% html_table()
tbl
df = as.data.frame(html_table(tbl))
library("rvest")
df = as.data.frame(html_table(tbl))
df = as.data.frame(html_table(tbl))
html_table()
detach("package:rvest", unload=TRUE)
library("rvest", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
df = as.data.frame(html_table(tbl))
tbl = html_nodes(webpage,"table") %>% .[[2]] %>%
html_table
tbl
df = as.data.frame(html_table(tbl))
tbl = html_nodes(webpage,"table")
df = as.data.frame(html_table(tbl))
tbl1 = html_nodes(webpage,"table")
df = as.data.frame(html_table(tbl1))
library("Rcpp")
cppFunction('int add(int a, int b, int c){int sum = a + b +c;return sum;}')
add(4,5,6)
> library("Rcpp")
> cppFunction('int add(int a, int b, int c){int sum = a + b +c;return sum;}')
> add(4,5,6)
oneR <-function()1L
oneR()
cppFunction(int oneR(){})
cppFunction('int oneR(){})
q''
qe
''
cppFunction('int oneR(){ return 1;}')
oneR()
signR <-function(x){}
signR <-function(x){
if(x > 1){}
}
signR <-function(x){
if(x>0){}
if(x>0){
}
}
signR <-function(x){
if(x>0){
1
}else if(x==0){
0
}else{}
1
}
signR <-function(x){
if(x>0){
1
}else if(x==0){
0
}else{
-1
}
}
signR(5)
cppFunction('int signR(int x){
if(x>0)
return 1;
else if(x==0)
return 0;
else
return -1;
}')
signR(0)
signR <-function(x){
if(x>1){
1
}else if(x==0){
0
}else {
-1
}
}
cppFunction('double sum(double NumericVector x){
double total = 0;
int i=0;
int len = x.size();
for(i=0;i<len;i++)
{
total = total + x[i];
}
return total;
}')
cppFunction('double sum(NumericVector x){
double total = 0;
int i=0;
int len = x.size();
for(i=0;i<len;i++)
{
total = total + x[i];
}
return total;
}')
x <- c(1,2,3,4,5)
sum(x)
sum<- function(x){
for(i in seq_along(x)){
toatal <-total + x[i]
}
total
}
sum(x)
sum<- function(x){
for(i in seq_along(x)){
total <-total + x[i]
}
total
}
sum(x)
sum<- function(x){
for(i in seq_along(x)){
total <-total + x[i]
}
total
}
sum<- function(x){total <- 0
for(i in seq_along(x)){
total <-total + x[i]
}
total
}
sum(x)
library('DT')
datatable(iris, options = list(pageLength = 10))
install.packages("DT")
library("DT", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library('DT')
datatable(iris, options = list(pageLength = 10))
install.packages('networkD3')
library('networkD3')
data(MisLinks, MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source =  "source", Target = "target", Value = "value",
NodeID = "name", Group = "group", opacity = 0.4)
library('threejs')
z <- seq(-10, 10, 0.01)
x <- cos(z*4)
y <- sin(z*4)
scatterplot3js(x,y,z, color=rainbow(length(z)))
install.packages("threejs")
library("threejs", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
t
library('threejs')
z <- seq(-10, 10, 0.01)
x <- cos(z*4)
y <- sin(z*4)
scatterplot3js(x,y,z, color=rainbow(length(z)))
library("swirl")
swirl()
swirl()
+ 7
5 +7
bye()
swirl()
swirl()
swirl()
bye()
x <- runif(1e3)
microbenchmark(
sum(x),
sumC(x),
sumR(x)
)
x <- runif(1e3)
microbenchmark(
sum(x),
sumC(x),
sumR(x)
)
library('microbenchmark')
install.packages("microbenchmark")
install.packages("microbenchmark")
install.packages("plyr")
library("microbenchmark", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:microbenchmark", unload=TRUE)
library("microbenchmark", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("plyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
x <- runif(1e3)
microbenchmark(
sum(x),
sumC(x),
sumR(x)
)
sumR<- function(x){
for(i in seq_along(x)){
toatal <-total + x[i]
}
total
}
cppFunction('double sumC(NumericVector x){
double total = 0;
int i=0;
int len = x.size();
for(i=0;i<len;i++)
{
total = total + x[i];
}
return total;
}')
library("Rcpp", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
cppFunction('double sumC(NumericVector x){
double total = 0;
int i=0;
int len = x.size();
for(i=0;i<len;i++)
{
total = total + x[i];
}
return total;
}')
x <- runif(1e3)
microbenchmark(
sum(x),
sumC(x),
sumR(x)
)
sumR<- function(x){
total <-0
for(i in seq_along(x)){
total <-total + x[i]
}
total
}
cppFunction('double sumC(NumericVector x){
double total = 0;
int i=0;
int len = x.size();
for(i=0;i<len;i++)
{
total = total + x[i];
}
return total;
}')
x <- runif(1e3)
microbenchmark(
sum(x),
sumC(x),
sumR(x)
)
pdistR <- funcition(x, ys){
sqrt((x - ys) ^ 2)
}
x <- 3
ys <- c(4,5,6)
pdistR <- funcition(x, ys) {
sqrt((x - ys) ^ 2)
}
pdistR <- function(x, ys) {
sqrt((x - ys) ^ 2)
}
cppFunction('NumericVector pdisC(double x, NumericVector ys)
{
int n = ys.size();
NumericVector out(n);
for(int i=0li<n;i++){
out[i]=sqrt(pow(x-ys),2.0);
}
return out;
}')
cppFunction('NumericVector pdistC(double x, NumericVector ys)
{
int n = ys.size();
NumericVector out(n);
for(int i=0li<n;i++){
out[i]=sqrt(pow(x-ys[i],2.0));
}
return out;
}')
cppFunction('NumericVector pdistC(double x, NumericVector ys)
{
int n = ys.size();
NumericVector out(n);
for(int i = 0; i< n ; i++) {
out[i]=sqrt(pow(x - ys[i],2.0));
}
return out;
}')
pdistC(x,ys)
cppFunction('NumericVector rowsumC(NumericMatrix x) {
int row = x.nrow(x);
int col = x.ncol(x);
int i=0,j=0,total=0;
NumericVector out(col)l
for(i=0;i<row;i++){
total =0;
for(j=0;j<ncol;j++){
total = total + x(i,j);
}
out[i]=total;
}
return out;
}
')
cppFunction('NumericVector rowsumC(NumericMatrix x) {
int row = x.nrow();
int col = x.ncol();
int i=0,j=0,total=0;
NumericVector out(col);
for(i = 0; i <row ; i++) {
total =0;
for(j = 0 ; j < col ; j++) {
total = total + x(i, j);
}
out[i] = total;
}
return out;
}
')
r = matrix(c(1,2,3,4,5,6,7,8,9),byrow=True)
r = matrix(c(1,2,3,4,5,6,7,8,9),byrow=TRUE)
r
r = matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3,ncol = 3)
r
rowsumC(r)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(swirl)
swirl()
swirl()
nxt()
nxt()
cars
sam <- cars$mpgCity
sam <-data(cars$mpgCity)
sam <- sample(data=cars$mpgCity)
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
mode(myMPG)
table(myMPG)
19
install_from_swirl("Exploratory_Data_Analysis")
swirl()
library(swirl)
swirl()
install_from_swirl(athematical_Biostatistics_Boot_Camp)
install_from_swirl(Mathematical_Biostatistics_Boot_Camp)
install_from_swirl(Mathematical_Biostatistics_Boot_Camp)
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
swirl()
mtcars
allMPG <-mtcars$mpg
allMPG
mean(allMPG)
sampleMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
n <-lenght(allMPG)
n <-length(allMPG)
tStat <- (sampMeanMPG - 12.0)/sqrt(sampVarMPG/n)
myDF <- n-1
tStat
myDF
pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
pVal <- pVal1 * 2
pVal
t.test(allMPG,
| mu=12.0, alternative="two.sided")
t.test(allMPG,mu=12.0, alternative="two.sided")
setwd("~/Desktop/Working_Wth_data_in_R_20_06")
getwd()
IBM=read.csv("IBMStock.csv")
GE =read.csv("GEStock.csv")
ProcterGamble  =read.csv("ProcterGambleStock.csv")
CocaCola = read.csv("CocaColaStock.csv")
Boeing = read.csv("BoeingStock.csv")
IBM$Date = as.Date(IBM$Date,"%m/%d/%y")
IBM$Date = as.Date(IBM$Date,"%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
str(IBM)
str(GE)
min(IBM$Date)
min(GE$Date)
max(IBM$Date)
max(GE$Date)
names(IBM)
mean(IBM$StockPrice)
min(GE$StockPrice)
max(CocaCola$StockPrice)
summary(Boeing)
sd(ProcterGamble$Date)
sd(ProcterGamble$StockPrice)
plot(CocaCola$Date,CocaCola$StockPrice)
plot(CocaCola$Date,CocaCola$StockPrice,type= "l")
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
plot(CocaCola$Date,CocaCola$StockPrice,type= "l",col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice,col="blue")
lines(ProcterGamble$Date, ProcterGamble$StockPrice,col="blue",lty=2)
abline(v=as.Date(c("2003-03-01")),lw=2)
plot(CocaCola$Date[301:432],CocaCola$StockPrice[301:432],type="l",col="red",ylim=c(0,210))
lines(ProcterGamble$Date, ProcterGamble$StockPrice,col="blue")
lines(IBM$Date, IBM$StockPrice,col="orange")
lines(GE$Date, GE$StockPrice,col="purple")
lines(Boeing$Date, Boeing$StockPrice,col="green")
abline(v=as.Date(c("2000-03-01")),lw=3)
abline(v=as.Date(c("1997-09-01")),lw=3)
abline(v=as.Date(c("1997-11-01")),lw=3)
abline(v=as.Date(c("2005-01-01")),lw=3)
abline(v=as.Date(c("20006-01-01")),lw=3)
abline(v=as.Date(c("2005-01-01")),lw=3)
abline(v=as.Date(c("2006-01-01")),lw=3)
abline(v=as.Date(c("2004-01-01")),lw=3)
abline(v=as.Date(c("2005-01-01")),lw=3)
tapply(IBM$StockPrice,months(IBM$Date),mean,na.rm=TRUE)
mean(IBM$StockPrice)
save.image("~/Desktop/Working_Wth_data_in_R_20_06/q.RData")
